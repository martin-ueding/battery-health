#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import matplotlib.pyplot as pl
import numpy as np
import os

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    plotopts = {
        "linestyle": "none",
        "marker": ".",
    }

    charge_file = os.path.expanduser("~/.local/share/battery-health/charge.txt");
    if os.path.isfile(charge_file):
        data = np.genfromtxt(charge_file);

        filtered = np.array([(x, y, z) for x, y, z in data if 0 <= y <= 1])

        pl.plot(filtered[:,0], filtered[:,1], label=u"Current charge", **plotopts)
        pl.plot(filtered[:,0], filtered[:,2], label=u"Maximum charge", **plotopts)
        pl.title(u"Charge")
        pl.xlabel(u"Time")
        pl.ylabel(u"Charge Ratio")
        pl.grid(True)
        pl.legend(loc="best")
        pl.savefig("Charge.pdf")
        pl.clf()

    powernow_file = os.path.expanduser("~/.local/share/battery-health/powernow.txt");
    if os.path.isfile(powernow_file):
        data = np.genfromtxt(powernow_file);


        filtered = np.array([(x, y) for x, y in data if y > 0])

        pl.plot(filtered[:,0], filtered[:,1], **plotopts)
        pl.title(u"Power Now")
        pl.xlabel(u"Time")
        pl.ylabel(u"Power in Watt")
        pl.grid(True)
        pl.savefig("Powernow.pdf")
        pl.clf()

    timeuntil_file = os.path.expanduser("~/.local/share/battery-health/timeuntil.txt");
    if os.path.isfile(timeuntil_file):
        data = np.genfromtxt(timeuntil_file);

        pl.plot(data[:,0], data[:,1], **plotopts)
        pl.title(u"Time Until")
        pl.xlabel(u"Time")
        pl.ylabel(u"Time until empty or charged")
        pl.grid(True)
        pl.savefig("timeuntil.pdf")
        pl.clf()

    timeleft_file = os.path.expanduser("~/.local/share/battery-health/timeleft.txt");
    if os.path.isfile(timeleft_file):
        data = np.genfromtxt(timeleft_file);

        pl.plot(data[:,0], data[:,1], **plotopts)
        pl.title(u"Time Left")
        pl.xlabel(u"Time")
        pl.ylabel(u"Time left to empty or charged")
        pl.grid(True)
        pl.savefig("timeleft.pdf")
        pl.clf()


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
